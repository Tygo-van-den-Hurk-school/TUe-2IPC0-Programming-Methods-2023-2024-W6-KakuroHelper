import java.util.Set;

/**
 * Main frame (window) of the application.
 *
<!--//# BEGIN TODO: Name, student ID, and date-->
<p><b>Tygo van den Hurk, 1705709, 17-dec-2023</b></p>
<!--//# END TODO-->
 */
public class MainFrame extends javax.swing.JFrame {

    /**
     * Creates new form MainFrame.
     */
    public MainFrame() {
        this.initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT
     * modify this code. The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private final void initComponents() {

        this.jLabelMax = new javax.swing.JLabel();
        this.jTextFieldMax = new javax.swing.JTextField();
        this.jLabelSum = new javax.swing.JLabel();
        this.jTextFieldSum = new javax.swing.JTextField();
        this.jLabelLength = new javax.swing.JLabel();
        this.jTextFieldLength = new javax.swing.JTextField();
        this.jCheckBoxList = new javax.swing.JCheckBox();
        this.jCheckBoxCount = new javax.swing.JCheckBox();
        this.jCheckBoxIntersection = new javax.swing.JCheckBox();
        this.jCheckBoxElimination = new javax.swing.JCheckBox();
        this.jButtonGenerate = new javax.swing.JButton();
        this.jScrollPane1 = new javax.swing.JScrollPane();
        this.jTextArea1 = new javax.swing.JTextArea();

        this.setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        this.setTitle("Kakuro Helper");

        this.jLabelMax.setText("Max");

        this.jTextFieldMax.setColumns(3);
        this.jTextFieldMax.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        this.jTextFieldMax.setText("9");

        this.jLabelSum.setText("Sum");

        this.jTextFieldSum.setColumns(3);
        this.jTextFieldSum.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        this.jTextFieldSum.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldSumActionPerformed(evt);
            }
        });

        this.jLabelLength.setText("Length");

        this.jTextFieldLength.setColumns(3);
        this.jTextFieldLength.setHorizontalAlignment(javax.swing.JTextField.RIGHT);

        this.jCheckBoxList.setText("List");

        this.jCheckBoxCount.setSelected(true);
        this.jCheckBoxCount.setText("Count");

        this.jCheckBoxIntersection.setText("Intersection");

        this.jCheckBoxElimination.setText("Elimination");

        this.jButtonGenerate.setText("Generate");
        this.jButtonGenerate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(final java.awt.event.ActionEvent evt) {
                MainFrame.this.jButtonGenerateActionPerformed(evt);
            }
        });

        this.jTextArea1.setColumns(20);
        this.jTextArea1.setRows(5);
        this.jScrollPane1.setViewportView(jTextArea1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        this.getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabelLength)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextFieldLength, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jCheckBoxList)
                            .addComponent(jCheckBoxCount)
                            .addComponent(jCheckBoxIntersection)
                            .addComponent(jCheckBoxElimination)
                            .addComponent(jButtonGenerate)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(37, 37, 37)
                                .addComponent(jLabelMax)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextFieldMax, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jLabelSum)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextFieldSum, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 263, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextFieldMax, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabelMax))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextFieldSum, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabelSum))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextFieldLength, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabelLength))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jCheckBoxList)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jCheckBoxCount)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jCheckBoxIntersection)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jCheckBoxElimination)
                        .addGap(18, 18, 18)
                        .addComponent(jButtonGenerate)
                        .addGap(14, 14, 14))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1)
                        .addContainerGap())))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonGenerateActionPerformed(final java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonGenerateActionPerformed
        // NOTE
        // This method could (in fact, should) be refactored (decomposed),
        // but that should also be accompanied by other redesigns,
        // which are not the focus of this assignment.
        final int max; // maximum number set in text field
        final int sum; // sum set in text field
        final int length; // length set in text field

        jTextArea1.setText("");
        // get and check generator parameters
        try {
            max = Integer.parseInt(jTextFieldMax.getText());
            sum = Integer.parseInt(jTextFieldSum.getText());
            length = Integer.parseInt(jTextFieldLength.getText());
        } catch (final NumberFormatException e) {
            jTextArea1.setText("Needs 2 numbers");
            return;
        }
        if (!(0 <= max)) {
            jTextArea1.append("0 <= Max required");
            return;
        }
        if (!(0 <= length && length <= max)) {
            jTextArea1.append("0 <= Length <= Max required");
            return;
        }

        // prepare generator
        this.generator = new KakuroCombinationGenerator();
        this.generator.setMaxNumber(max);
        final CompositeGeneratorObserver<Set<Integer>> observers;
        observers = new CompositeGeneratorObserver<Set<Integer>>();
        this.generator.setObserver(observers);
        if (jCheckBoxList.isSelected()) {
            PushPullAdapter listerAdapter = new PushPullAdapter(new Lister(), true);
            observers.add(listerAdapter);
        }

        Counter counter = null;
        if (jCheckBoxCount.isSelected()) {
            counter = new Counter();
            // N.B. This counter does not need the data on its push interface.
            // Therefore, the PushPullAdapter can suppress pulling of the data.
            final PushPullAdapter counterAdapter = new PushPullAdapter(counter, false);
            observers.add(counterAdapter);
        }
//# BEGIN TODO: Register other observers
// Replace this line
//# END TODO

        // invoke generator
        generator.generate(sum, length);

        // show observer results
        if (counter != null) {
            jTextArea1.append("Number of combinations generated: " + counter.getCount() + "\n");
        }
//# BEGIN TODO: Show results of other observers
// Replace this line
//# END TODO
    }//GEN-LAST:event_jButtonGenerateActionPerformed

    private void jTextFieldSumActionPerformed(final java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldSumActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldSumActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(final String[] args) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonGenerate;
    private javax.swing.JCheckBox jCheckBoxCount;
    private javax.swing.JCheckBox jCheckBoxElimination;
    private javax.swing.JCheckBox jCheckBoxIntersection;
    private javax.swing.JCheckBox jCheckBoxList;
    private javax.swing.JLabel jLabelLength;
    private javax.swing.JLabel jLabelMax;
    private javax.swing.JLabel jLabelSum;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextField jTextFieldLength;
    private javax.swing.JTextField jTextFieldMax;
    private javax.swing.JTextField jTextFieldSum;
    // End of variables declaration//GEN-END:variables

    /**
     * The generator.
     */
    private KakuroCombinationGenerator generator;

    /**
     * Listener that appends generated combinations to the text area.
     */
    private class Lister implements GeneratorListener {
        
        @Override
        public void combinationGenerated(final Set<Integer> combination) {
            MainFrame.this.jTextArea1.append(combination.toString() + "\n");
        }
    }

}
